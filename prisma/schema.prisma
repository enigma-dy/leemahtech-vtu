generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(ulid())
  telegramId        BigInt?  @unique
  telegramFirstName String?
  telegramUsername  String?
  username String?

  fullName          String?
  email             String?  @unique 
  password          String?         

  phone             String?
  address           String?
  walletId          String   @unique

  wallet    Wallet   @relation(fields: [walletId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AccountLinkToken AccountLinkToken?

  Transaction Transaction[]

  DataPurchase DataPurchase[]
}
model Wallet {
  id        String    @id @default(uuid())
  name      String
  balance   Decimal   @default(0) @db.Decimal(20, 4)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  User      User?
  Entry     Entry[]
}

model Ledger {
  id          String    @id @default(uuid())
  description String
  timestamp   DateTime  @default(now())
  entries     Entry[]
  createdBy   String
  createdAt   DateTime  @default(now())
}

model Entry {
  id        String   @id @default(uuid())
  walletId String
  wallet   Wallet  @relation(fields: [walletId], references: [id])
  ledgerId  String
  ledger    Ledger   @relation(fields: [ledgerId], references: [id])
  amount    Decimal
  type      EntryType  
  createdAt DateTime @default(now())
}


model DataPrice {
  id               String  @id @default(uuid())
  network_id       String
  network_name     String   
  plan_size        String
  plan_volume      String
  plan_name_id     String
  plan_name_id2    String
  Affilliate_price Decimal
  TopUser_price    Decimal
  api_price        Decimal
  plan_type        String
  validity         String
  commission       Decimal
  
  @@unique([network_id, plan_name_id], name: "network_id_plan_name_id")
}

enum EntryType{
  DEBIT
  CREDIT
}

enum SmeProvider {
  datastation
  husmodata
  direct
}

model ProviderSetting {
  id             Int      @id @default(1)
  activeProvider SmeProvider
}

model AccountLinkToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique 
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Transaction {
  id            String   @id @default(uuid())
  txRef         String   @unique
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  amount        Decimal  @db.Decimal(20, 2)
  currency      String   @default("NGN")
  status        TransactionStatus @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  completedAt   DateTime?

  errorMessage  String?
  channel       String?  
  provider      String?  
  walletId      String?
}

model DataPurchase {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  network     String
  planName    String
  planSize    String
  planVolume String
  amount      Decimal  @db.Decimal(20, 2)
  status      PurchaseStatus @default(PENDING)
  response    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum PurchaseStatus {
  PENDING
  SUCCESS
  FAILED
}


enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
  EXPIRED
}



model UnifiedPlan {
  id            String   @id @default(uuid())
  provider      SmeProvider
  data_plan_id  String
  network_id    Int
  network_name  String
  plan_amount   Float
  plan_size     String
  plan_type     String
  validity      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([provider, data_plan_id])
}
