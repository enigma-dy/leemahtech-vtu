generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(ulid())
  telegramId        BigInt?  @unique
  telegramFirstName String?
  telegramUsername  String?
  username String?

  fullName          String?
  email             String?  @unique 
  password          String?
  userRole  Role @default(user)         

  phone             String?
  address           String?
  walletId          String   @unique
  
  isEmailVerified Boolean @default(false)

  isActiveReseller          Boolean  @default(false)

  referralCode      String?  @unique
  referredById      String?
  referredBy        User?    @relation("Referrals", fields: [referredById], references: [id])
  referrals         User[]   @relation("Referrals")

  cashbackBalance   Decimal  @default(0) @db.Decimal(20, 4)


  apiKey            String?  @unique 
  apiKeyCreatedAt   DateTime? 


  wallet    Wallet   @relation(fields: [walletId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PasswordResetToken PasswordResetToken[]

  AccountLinkToken AccountLinkToken?

  Transaction Transaction[]

  // DataPurchase DataPurchase[]

  ReferralReward ReferralReward[]

  EmailVerificationToken EmailVerificationToken[]

  DataPurchase DataPurchase[]
}

enum Role{
  user
  admin
  reseller
}
model Wallet {
  id        String   @id @default(uuid())
  name      String   @unique
  balance   Decimal  @default(0) @db.Decimal(20, 4)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User      User?
  Entry     Entry[]
}

model Ledger {
  id          String    @id @default(uuid())
  description String
  timestamp   DateTime  @default(now())
  entries     Entry[]
  createdBy   String
  createdAt   DateTime  @default(now())
}

model Entry {
  id            String       @id @default(uuid())
  walletId      String
  wallet        Wallet       @relation(fields: [walletId], references: [id])
  ledgerId      String
  ledger        Ledger       @relation(fields: [ledgerId], references: [id])
  amount        Decimal
  type          EntryType  
  createdAt     DateTime     @default(now())
  transactionId String?
  transaction   Transaction?  @relation("TransactionEntries", fields: [transactionId], references: [id])
}


model DataPrice {
  id               String  @id @default(uuid())
  network_id       String
  network_name     String   
  plan_size        String
  plan_volume      String
  plan_name_id     String
  plan_name_id2    String
  Affilliate_price Decimal
  TopUser_price    Decimal
  api_price        Decimal
  plan_type        String
  validity         String
  commission       Decimal
  
  @@unique([network_id, plan_name_id], name: "network_id_plan_name_id")
}

enum EntryType{
  DEBIT
  CREDIT
}

enum SmeProvider {
  datastation
  husmodata
  direct
}

model ProviderSetting {
  id             Int      @id @default(1)
  activeProvider SmeProvider
}

model AccountLinkToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique 
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Transaction {
  id            String   @id @default(uuid())
  txRef         String   @unique
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  amount        Decimal  @db.Decimal(20, 2)
  currency      String   @default("NGN")
  status        TransactionStatus @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  completedAt   DateTime?
  errorMessage  String?
  channel       String?  
  provider      String?  
  walletId      String?
  entries       Entry[]   @relation("TransactionEntries")
}

model DataPurchase {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  network     String
  planName    String
  planSize    String
  planVolume String
  amount      Decimal  @db.Decimal(20, 2)
  status      PurchaseStatus @default(PENDING)
  response    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum PurchaseStatus {
  PENDING
  SUCCESS
  FAILED
}


enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
  EXPIRED
}

model UnifiedPlan {
  id            String   @id @default(uuid())
  provider      SmeProvider
  data_plan_id  String
  network_id    Int
  network_name  String
  plan_amount   Decimal
  selling_price Decimal
  plan_size     String
  plan_type     String
  validity      String
  visibilty Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  cashbackPercentage Decimal? @db.Decimal(5, 2)
  

  @@unique([provider, data_plan_id])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model ReferralReward {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  amount        Decimal  @db.Decimal(20, 4)
  description   String
  createdAt     DateTime @default(now())
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}